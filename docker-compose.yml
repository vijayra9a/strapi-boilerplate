# docker-compose.yml
version: '3.8'

services:
  strapi:
    container_name: strapi_app
    # Build the image using the Dockerfile in the current directory
    build: .
    # Use the 'develop' command to enable live-reloading
    command: npm run develop
    restart: unless-stopped
    # Load the environment variables from the .env file
    env_file: .env
    environment:
      # Override specific environment variables for Docker
      DATABASE_CLIENT: ${DATABASE_CLIENT:-postgres}
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-strapi}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-strapi}
    volumes:
      # Mounts the project directory for live code changes
      - .:/opt/app
      # This prevents the local node_modules from overwriting the container's
      - /opt/app/node_modules
      # Persist uploaded files
      - ./public/uploads:/opt/app/public/uploads
    ports:
      # Map port 1337 on your machine to port 1337 in the container
      - '1337:1337'
    networks:
      - strapi-network
    depends_on:
      - db

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: strapi_db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME:-strapi}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-strapi}
      POSTGRES_DB: ${DATABASE_NAME:-strapi}
    volumes:
      - strapi-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - strapi-network

  # Redis (Optional - uncomment to use for caching/sessions)
  # redis:
  #   image: redis:7-alpine
  #   container_name: strapi_redis
  #   restart: unless-stopped
  #   ports:
  #     - '6379:6379'
  #   networks:
  #     - strapi-network
  #   volumes:
  #     - redis-data:/data

  # Adminer - Database Management UI (Optional - uncomment to use)
  adminer:
    image: adminer:latest
    container_name: strapi_adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    networks:
      - strapi-network
    depends_on:
      - db
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  strapi-data:
  # redis-data:

networks:
  strapi-network:
    name: strapi-network
    driver: bridge